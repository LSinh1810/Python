<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ch∆°i v·ªõi m√°y - Caro Game</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <style>
        /* Th√™m CSS cho b·ªô ƒë·∫øm th·ªùi gian */
        .timer-display {
            font-size: 1.2rem;
            font-weight: bold;
            margin-top: 5px;
            color: #444;
        }
        .timer-critical {
            color: #f44336;
            animation: blink 1s infinite;
        }
        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .move-symbol {
            font-size: 24px;
            font-weight: bold;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
        }
        .player1 .move-symbol {
            color: #2196F3;
        }
        .player2 .move-symbol {
            color: #f44336;
        }
        /* ƒê·ªãnh d·∫°ng khung avatar */
        .player-avatar {
            width: 60px;
            height: 60px;
            border-radius: 10px;
            overflow: hidden;
            border: 2px solid #ddd;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        .player-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .exit-confirmation {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .confirmation-box {
            background-color: white;
            padding: 2.5rem;
            border-radius: 12px;
            text-align: center;
            max-width: 400px;
            width: 90%;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            animation: scaleIn 0.3s ease-out;
        }
        
        @keyframes scaleIn {
            from { transform: scale(0.9); }
            to { transform: scale(1); }
        }
        
        .confirmation-box h3 {
            margin-top: 0;
            font-size: 24px;
            color: #333;
            margin-bottom: 15px;
        }
        
        .confirmation-box p {
            font-size: 16px;
            color: #555;
            line-height: 1.5;
            margin-bottom: 0;
        }
        
        .confirmation-buttons {
            display: flex;
            justify-content: center;
            gap: 1.5rem;
            margin-top: 2rem;
        }
        
        .confirmation-buttons button {
            padding: 10px 25px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .confirmation-buttons .primary-btn {
            background-color: #4CAF50;
            color: white;
        }
        
        .confirmation-buttons .primary-btn:hover {
            background-color: #3d9140;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .confirmation-buttons .secondary-btn {
            background-color: #f44336;
            color: white;
        }
        
        .confirmation-buttons .secondary-btn:hover {
            background-color: #e53935;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="game-header">
            <!-- Player Info -->
            <div class="player-info">
                <div class="player-avatar player1">
                    <img src="{{ user.avatar if user.avatar else url_for('static', filename='images/default_avatar.png') }}" alt="Player">
                </div>
                <div class="player-details">
                    <span class="player-name">{{ user.displayName }}</span>
                    <span class="timer-display" id="player-move-timer">0:30</span>
                </div>
            </div>
            
            <!-- Center Info -->
            <div class="game-center-info">
                <span class="coin-display">
                    ü™ô {{ user.coins if user.coins else '0' }}
                </span>
            </div>
            
            <!-- AI Info -->
            <div class="player-info right">
                <div class="player-details">
                    <span class="player-name">AI</span>
                    <span class="timer-display" id="ai-move-timer">0:30</span>
                </div>
                <div class="player-avatar player2">
                    <img src="{{ url_for('static', filename='images/robot_avatar.png') }}" alt="AI">
                </div>
            </div>
        </div>
        
        <!-- Game Board -->
        <div class="game-board" id="game-board">
            <!-- Board will be generated via JavaScript -->
        </div>
        
        <!-- Game Controls -->
        <div class="game-controls">
            <button class="give-up-btn" id="give-up-btn">
                T·ª´ b·ªè
                <span class="key-hint">Esc</span>
            </button>
        </div>
    </div>
    
    <!-- Exit Confirmation Modal (Hidden by default) -->
    <div class="exit-confirmation" id="exit-confirmation" style="display: none;">
        <div class="confirmation-box">
            <h3>B·∫°n mu·ªën tho√°t tr√≤ ch∆°i?</h3>
            <p>N·∫øu tho√°t b√¢y gi·ªù, b·∫°n s·∫Ω thua tr·∫≠n ƒë·∫•u n√†y.</p>
            <div class="confirmation-buttons">
                <button class="btn primary-btn" id="stay-btn">Ti·∫øp t·ª•c ch∆°i</button>
                <button class="btn secondary-btn" id="exit-btn">Tho√°t</button>
            </div>
        </div>
    </div>
    
    <script>
        // Connect to Socket.IO
        const socket = io();
        const gameId = "{{ game.game_id }}";
        
        // Game state
        let board = Array(15).fill().map(() => Array(15).fill(0));
        let currentPlayer = 1;  // 1 for player, 2 for computer
        let gameOver = false;
        
        // Timer variables
        let moveSeconds = 30; // 30 seconds per move
        let moveTimerInterval;
        
        // Initialize the game
        function initGame() {
            // Initialize board
            initBoard();
            
            // Reset board array 
            board = Array(15).fill().map(() => Array(15).fill(0));
            
            // Load existing moves if any
            {% if moves %}
                {% for move in moves %}
                    // Ki·ªÉm tra xem move c√≥ position_x v√† position_y kh√¥ng
                    {% if move.position_x is not none and move.position_y is not none %}
                        board[{{ move.position_y }}][{{ move.position_x }}] = {{ "1" if move.player_id else "2" }};
                    {% endif %}
                {% endfor %}
                updateBoardUI();
                // Set current player based on last move
                {% if moves|length % 2 == 0 %}
                    currentPlayer = 1;
                {% else %}
                    currentPlayer = 2;
                {% endif %}
            {% endif %}
            
            // Debug: Log board state
            console.log("Initial board state:", JSON.parse(JSON.stringify(board)));
            
            // Start timers
            startTimers();
            
            // Set up exit confirmation
            document.getElementById('give-up-btn').addEventListener('click', showExitConfirmation);
            document.getElementById('stay-btn').addEventListener('click', hideExitConfirmation);
            document.getElementById('exit-btn').addEventListener('click', exitGame);
            
            // Handle ESC key
            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    showExitConfirmation();
                }
            });
        }
        
        // Initialize the game board
        function initBoard() {
            const boardElement = document.getElementById('game-board');
            boardElement.innerHTML = '';
            
            for (let y = 0; y < 15; y++) {
                for (let x = 0; x < 15; x++) {
                    const cell = document.createElement('div');
                    cell.className = 'board-cell';
                    cell.dataset.x = x;
                    cell.dataset.y = y;
                    cell.addEventListener('click', () => makeMove(x, y));
                    boardElement.appendChild(cell);
                }
            }
        }
        
        // Make a move
        function makeMove(x, y) {
            if (gameOver || board[y][x] !== 0 || currentPlayer !== 1) {
                return;
            }
            
            console.log(`Making move at (${x}, ${y})`);
            
            // Update the board
            board[y][x] = 1;
            
            // X√≥a m·ªçi n·ªôi dung trong √¥ tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            const index = y * 15 + x;
            const cell = document.querySelectorAll('.board-cell')[index];
            cell.className = 'board-cell';
            cell.innerHTML = '';
            
            // Th√™m X v√†o √¥
            cell.classList.add('player1');
            const symbol = document.createElement('div');
            symbol.className = 'move-symbol';
            symbol.textContent = 'X';
            cell.appendChild(symbol);
            
            // Chuy·ªÉn l∆∞·ª£t ƒëi sang AI
            currentPlayer = 2;
            
            // Reset move timer
            moveSeconds = 30;
            updateMoveTimer();
            
            // Send move to server, g·ª≠i lu√¥n b·∫£ng c·ªù hi·ªán t·∫°i
            fetch('/make_move', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    x: x,
                    y: y,
                    game_id: gameId,
                    board: board
                }),
            })
            .then(response => response.json())
            .then(data => {
                console.log("Server response:", data);
                
                if (data.status === 'win') {
                    gameOver = true;
                    stopTimers();
                    window.location.href = `/after_game/${gameId}`;
                    return;
                }
                
                if (data.ai_move) {
                    // Update the board with computer's move
                    const ai_x = data.ai_move.x;
                    const ai_y = data.ai_move.y;
                    console.log(`AI move at (${ai_x}, ${ai_y})`);
                    
                    board[ai_y][ai_x] = 2;
                    
                    // X√≥a m·ªçi n·ªôi dung trong √¥ tr∆∞·ªõc khi c·∫≠p nh·∫≠t
                    const ai_index = ai_y * 15 + ai_x;
                    const ai_cell = document.querySelectorAll('.board-cell')[ai_index];
                    ai_cell.className = 'board-cell';
                    ai_cell.innerHTML = '';
                    
                    // Th√™m O v√†o √¥
                    ai_cell.classList.add('player2');
                    const ai_symbol = document.createElement('div');
                    ai_symbol.className = 'move-symbol';
                    ai_symbol.textContent = 'O';
                    ai_cell.appendChild(ai_symbol);
                    
                    // Chuy·ªÉn l∆∞·ª£t ƒëi v·ªÅ ng∆∞·ªùi ch∆°i
                    currentPlayer = 1;
                    
                    // Debug: Log board state after AI move
                    console.log("Board state after AI move:", JSON.parse(JSON.stringify(board)));
                    
                    // Reset move timer for player's next turn
                    moveSeconds = 30;
                    updateMoveTimer();
                    
                    if (data.status === 'lose') {
                        gameOver = true;
                        stopTimers();
                        window.location.href = `/after_game/${gameId}`;
                    }
                } else if (data.status === 'error') {
                    // X·ª≠ l√Ω l·ªói
                    console.error('Error from server:', data.message);
                    alert('C√≥ l·ªói x·∫£y ra: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('C√≥ l·ªói k·∫øt n·ªëi: ' + error);
            });
        }
        
        // Update the UI to reflect the current board state
        function updateBoardUI() {
            const cells = document.querySelectorAll('.board-cell');
            
            console.log("Updating board UI with state:", JSON.parse(JSON.stringify(board)));
            
            // X√≥a t·∫•t c·∫£ n·ªôi dung v√† style tr∆∞·ªõc khi c·∫≠p nh·∫≠t UI
            for (let y = 0; y < 15; y++) {
                for (let x = 0; x < 15; x++) {
                    const index = y * 15 + x;
                    cells[index].className = 'board-cell';
                    cells[index].innerHTML = '';
                }
            }
            
            // Sau ƒë√≥ m·ªõi th√™m n·ªôi dung m·ªõi
            for (let y = 0; y < 15; y++) {
                for (let x = 0; x < 15; x++) {
                    const index = y * 15 + x;
                    
                    if (board[y][x] === 1) {
                        console.log(`Cell (${x}, ${y}) marked as X`);
                        cells[index].classList.add('player1');
                        const symbol = document.createElement('div');
                        symbol.className = 'move-symbol';
                        symbol.textContent = 'X';
                        cells[index].appendChild(symbol);
                    } else if (board[y][x] === 2) {
                        console.log(`Cell (${x}, ${y}) marked as O`);
                        cells[index].classList.add('player2');
                        const symbol = document.createElement('div');
                        symbol.className = 'move-symbol';
                        symbol.textContent = 'O';
                        cells[index].appendChild(symbol);
                    }
                }
            }
        }
        
        // Timer functions
        function startTimers() {
            // Update immediately
            updateMoveTimer();
            
            // Set intervals
            moveTimerInterval = setInterval(function() {
                if (!gameOver) {
                    // Gi·∫£m th·ªùi gian cho ng∆∞·ªùi ch∆°i hi·ªán t·∫°i
                    if (currentPlayer === 1) {
                        // Ng∆∞·ªùi ch∆°i ƒëang ƒëi
                        moveSeconds--;
                        updateMoveTimer();
                        
                        if (moveSeconds <= 0) {
                            endGameOnTimeOut();
                        }
                    } else {
                        // AI ƒëang ƒëi (gi·∫£ l·∫≠p th·ªùi gian AI suy nghƒ©)
                        moveSeconds--;
                        updateMoveTimer();
                        
                        if (moveSeconds <= 0) {
                            // N·∫øu h·∫øt th·ªùi gian AI, coi nh∆∞ AI thua (ƒëi·ªÅu n√†y hi·∫øm khi x·∫£y ra)
                            endGameOnTimeOut();
                        }
                    }
                }
            }, 1000);
        }
        
        function stopTimers() {
            clearInterval(moveTimerInterval);
        }
        
        function updateMoveTimer() {
            const timerDisplay = currentPlayer === 1 ? 
                document.getElementById('player-move-timer') : 
                document.getElementById('ai-move-timer');
            
            timerDisplay.textContent = `0:${moveSeconds.toString().padStart(2, '0')}`;
            
            if (moveSeconds <= 10) {
                timerDisplay.classList.add('timer-critical');
            } else {
                timerDisplay.classList.remove('timer-critical');
            }
            
            // Reset the other player's move timer display
            const otherTimerDisplay = currentPlayer === 1 ? 
                document.getElementById('ai-move-timer') : 
                document.getElementById('player-move-timer');
            otherTimerDisplay.textContent = "0:30";
            otherTimerDisplay.classList.remove('timer-critical');
        }
        
        function endGameOnTimeOut() {
            gameOver = true;
            stopTimers();
            
            // Send timeout info to server
            fetch('/give_up', {
                method: 'GET'
            })
            .then(() => {
                window.location.href = `/after_game/${gameId}`;
            });
        }
        
        // Exit confirmation functions
        function showExitConfirmation() {
            document.getElementById('exit-confirmation').style.display = 'flex';
        }
        
        function hideExitConfirmation() {
            document.getElementById('exit-confirmation').style.display = 'none';
        }
        
        function exitGame() {
            window.location.href = '/';
        }
        
        // Initialize game when page loads
        window.onload = initGame;
    </script>
</body>
</html>