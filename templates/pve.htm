<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Play with Computer - Caro Game</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
</head>
<body>
    <div class="game-container">
        <div class="game-header">
            <!-- Player 1 Info -->
            <div class="player-info">
                <div class="player-avatar player1">
                    <img src="{{ url_for('static', filename='images/avatar_0.png') }}" alt="Player">
                </div>
                <div class="player-details">
                    <span class="player-name">{{ user.username }}</span>
                    <span class="player-score">0/4:12</span>
                </div>
            </div>
            
            <!-- Center Info -->
            <div class="game-center-info">
                <span class="coin-display">
                    ü™ô 1.0
                </span>
            </div>
            
            <!-- Player 2 Info (Computer) -->
            <div class="player-info right">
                <div class="player-details">
                    <span class="player-name">Robo Tr√≠ C√†y</span>
                    <span class="player-score">0/4:50</span>
                </div>
                <div class="player-avatar player2">
                    <img src="{{ url_for('static', filename='images/robot_avatar.png') }}" alt="Computer">
                </div>
            </div>
        </div>
        
        <!-- Game Board -->
        <div class="game-board" id="game-board">
            <!-- Board will be generated via JavaScript -->
        </div>
        
        <!-- Game Controls -->
        <div class="game-controls">
            <button class="give-up-btn">
                T·ª´ b·ªè
                <span class="key-hint">Esc</span>
            </button>
        </div>
    </div>
    
    <!-- Game Over Modal (Hidden by default) -->
    <div class="game-over-modal" id="game-over-modal" style="display: none;">
        <div class="modal-content">
            <div class="winner-display">
                <div class="progress-bar">
                    <div class="progress" id="progress-bar"></div>
                    <div class="avatar-indicator" id="winner-avatar">
                        <img src="{{ url_for('static', filename='images/avatar_0.png') }}" alt="Winner">
                    </div>
                </div>
                
                <p class="game-result" id="game-result">B·∫°n ƒë√£ th·∫Øng!</p>
                
                <div class="after-game-controls">
                    <button class="btn primary-btn" id="play-again-btn">
                        Ch∆°i l·∫°i
                        <span class="key-hint">‚Üµ Enter</span>
                    </button>
                    <button class="btn secondary-btn" id="leave-room-btn">
                        R·ªùi kh·ªèi ph√≤ng
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Connect to Socket.IO
        const socket = io();
        const gameId = "{{ game_id }}";
        
        // Game state
        let board = Array(15).fill().map(() => Array(15).fill(0));
        let currentPlayer = 1;  // 1 for player, 2 for computer
        let gameOver = false;
        
        // Initialize the game board
        function initBoard() {
            const boardElement = document.getElementById('game-board');
            boardElement.innerHTML = '';
            
            for (let y = 0; y < 15; y++) {
                for (let x = 0; x < 15; x++) {
                    const cell = document.createElement('div');
                    cell.className = 'board-cell';
                    cell.dataset.x = x;
                    cell.dataset.y = y;
                    cell.addEventListener('click', () => makeMove(x, y));
                    boardElement.appendChild(cell);
                }
            }
        }
        
        // Make a move
        function makeMove(x, y) {
            if (gameOver || board[y][x] !== 0 || currentPlayer !== 1) {
                return;
            }
            
            // Update the board
            board[y][x] = 1;
            updateBoardUI();
            
            // Check for win
            if (checkWin(x, y, 1)) {
                gameOver = true;
                showGameOver(1);
                return;
            }
            
            // Switch to computer's turn
            currentPlayer = 2;
            
            // Get computer move
            setTimeout(() => {
                socket.emit('ai_move', {game_id: gameId, board: board}, (response) => {
                    const {x, y, winner} = response;
                    
                    // Update the board with computer's move
                    board[y][x] = 2;
                    updateBoardUI();
                    
                    if (winner) {
                        gameOver = true;
                        showGameOver(2);
                    } else {
                        // Switch back to player's turn
                        currentPlayer = 1;
                    }
                });
            }, 500);  // Small delay for better UX
        }
        
        // Update the UI to reflect the current board state
        function updateBoardUI() {
            const cells = document.querySelectorAll('.board-cell');
            
            for (let y = 0; y < 15; y++) {
                for (let x = 0; x < 15; x++) {
                    const index = y * 15 + x;
                    cells[index].className = 'board-cell';
                    
                    if (board[y][x] === 1) {
                        cells[index].classList.add('player1');
                    } else if (board[y][x] === 2) {
                        cells[index].classList.add('player2');
                    }
                }
            }
        }
        
        // Check for win
        function checkWin(x, y, player) {
            const directions = [
                [[0, 1], [0, -1]],   // Vertical
                [[1, 0], [-1, 0]],   // Horizontal
                [[1, 1], [-1, -1]],  // Diagonal /
                [[1, -1], [-1, 1]]   // Diagonal \
            ];
            
            for (const dirPair of directions) {
                let count = 1;  // Count the piece we just placed
                
                // Check in both directions
                for (const [dx, dy] of dirPair) {
                    let nx = x;
                    let ny = y;
                    
                    // Count consecutive pieces in this direction
                    for (let i = 0; i < 4; i++) {  // Need 4 more to make 5 in a row
                        nx += dx;
                        ny += dy;
                        if (0 <= nx && nx < 15 && 0 <= ny && ny < 15 && board[ny][nx] === player) {
                            count++;
                        } else {
                            break;
                        }
                    }
                }
                
                if (count >= 5) {
                    return true;
                }
            }
            
            return false;
        }
        
        // Show game over screen
        function showGameOver(winner) {
            const modal = document.getElementById('game-over-modal');
            const result = document.getElementById('game-result');
            const progressBar = document.getElementById('progress-bar');
            const winnerAvatar = document.getElementById('winner-avatar');
            
            if (winner === 1) {
                result.textContent = 'B·∫°n ƒë√£ th·∫Øng!';
                progressBar.style.width = '70%';
                winnerAvatar.querySelector('img').src = "{{ url_for('static', filename='images/avatar_0.png') }}";
            } else {
                result.textContent = 'B·∫°n ƒë√£ thua!';
                progressBar.style.width = '30%';
                winnerAvatar.querySelector('img').src = "{{ url_for('static', filename='images/robot_avatar.png') }}";
            }
            
            modal.style.display = 'flex';
        }
        
        // Reset the game
        function resetGame() {
            board = Array(15).fill().map(() => Array(15).fill(0));
            currentPlayer = Math.random() < 0.5 ? 1 : 2;
            gameOver = false;
            
            updateBoardUI();
            
            const modal = document.getElementById('game-over-modal');
            modal.style.display = 'none';
            
            // If computer starts, get its move
            if (currentPlayer === 2) {
                setTimeout(() => {
                    socket.emit('ai_move', {game_id: gameId, board: board}, (response) => {
                        const {x, y} = response;
                        
                        // Update the board with computer's move
                        board[y][x] = 2;
                        updateBoardUI();
                        
                        // Switch to player's turn
                        currentPlayer = 1;
                    });
                }, 500);
            }
        }
        
        // Event listeners
        document.getElementById('play-again-btn').addEventListener('click', resetGame);
        document.getElementById('leave-room-btn').addEventListener('click', () => {
            if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r·ªùi kh·ªèi ph√≤ng?')) {
                window.location.href = "{{ url_for('home.index') }}";
            }
        });
        
        document.querySelector('.give-up-btn').addEventListener('click', () => {
            if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·ª´ b·ªè?')) {
                window.location.href = "{{ url_for('home.index') }}";
            }
        });
        
        // Initialize the game
        initBoard();
        
        // Randomly decide who goes first
        if (Math.random() < 0.5) {
            currentPlayer = 2;
            
            // Computer makes the first move
            setTimeout(() => {
                socket.emit('ai_move', {game_id: gameId, board: board}, (response) => {
                    const {x, y} = response;
                    
                    // Update the board with computer's move
                    board[y][x] = 2;
                    updateBoardUI();
                    
                    // Switch to player's turn
                    currentPlayer = 1;
                });
            }, 500);
        }
    </script>
</body>
</html>