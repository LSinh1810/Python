<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Play with Friend - Caro Game</title>
    <link
      rel="stylesheet"
      href="{{ url_for('static', filename='css/style.css') }}"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
  </head>
  <body>
    <div class="game-container">
      <div class="game-header">
        <!-- Player 1 Info -->
        <div class="player-info">
          <div class="player-avatar player1">
            <img
              src="{{ player1.avatar if player1.avatar else url_for('static', filename='images/avatar_0.png') }}"
              alt="Player 1"
            />
          </div>
          <div class="player-details">
            <span class="player-name">{{ player1.displayName }}</span>
            <span class="timer-display" id="player1-timer">0:30</span>
          </div>
        </div>

        <!-- Center Info -->
        <div class="game-center-info">
          <span class="coin-display">
            ü™ô {{ user.coins if user.coins else '0' }}
          </span>
          {% if is_player1 %}
          <div class="room-info">
            <p>M√£ ph√≤ng: <strong>{{ room_code }}</strong></p>
            <p>
              Link game:
              <a href="{{ game_link }}" target="_blank">{{ game_link }}</a>
            </p>
          </div>
          {% endif %}
        </div>

        <!-- Player 2 Info -->
        <div class="player-info right">
          <div class="player-details">
            <span class="player-name"
              >{{ player2.displayName if player2 else 'ƒêang ch·ªù...' }}</span
            >
            <span class="timer-display" id="player2-timer">0:30</span>
          </div>
          <div class="player-avatar player2">
            <img
              src="{{ player2.avatar if player2 and player2.avatar else url_for('static', filename='images/avatar_1.png') }}"
              alt="Player 2"
            />
          </div>
        </div>
      </div>

      <!-- Game Area -->
      <div class="game-area">
        <!-- Game Board -->
        <div class="game-board" id="game-board">
          <!-- Board will be generated via JavaScript -->
        </div>
      </div>

      <!-- Game Controls -->
      <div class="game-controls">
        <button class="give-up-btn">
          T·ª´ b·ªè
          <span class="key-hint">Esc</span>
        </button>
      </div>
    </div>

    <!-- Game Over Modal (Hidden by default) -->
    <div class="game-over-modal" id="game-over-modal" style="display: none">
      <div class="modal-content">
        <div class="winner-display">
          <div class="progress-bar">
            <div class="progress" id="progress-bar"></div>
            <div class="avatar-indicator" id="winner-avatar">
              <img
                src="{{ url_for('static', filename='images/avatar_0.png') }}"
                alt="Winner"
              />
            </div>
          </div>

          <p class="game-result" id="game-result">
            ƒê·ªëi th·ªß c·ªßa b·∫°n mu·ªën ch∆°i l·∫°i
          </p>

          <div class="after-game-controls">
            <button class="btn primary-btn" id="play-again-btn">
              Ch∆°i l·∫°i
              <span class="key-hint">‚Üµ Enter</span>
            </button>
            <button class="btn secondary-btn" id="leave-room-btn">
              R·ªùi kh·ªèi ph√≤ng
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Connect to Socket.IO
      const socket = io();
      const gameId = "{{ game.game_id }}";
      const userId = "{{ user.user_id }}";
      const displayName = "{{ user.displayName }}";
      const isPlayer1 = {{ 'true' if is_player1 else 'false' }};
      const roomCode = "{{ game.room_code }}";

      // Join the room first
      socket.emit('join', { room: roomCode });

      // Then join the game
      socket.emit('join_game', {
          game_id: gameId,
          player_id: userId,
          display_name: displayName,
          room: roomCode
      });

      // Game state
      let board = Array(15).fill().map(() => Array(15).fill(null));
      let currentPlayer = null;
      let gameOver = false;

      // Initialize the game board
      function initBoard() {
          const boardElement = document.getElementById('game-board');
          boardElement.innerHTML = '';

          for (let y = 0; y < 15; y++) {
              for (let x = 0; x < 15; x++) {
                  const cell = document.createElement('div');
                  cell.className = 'board-cell';
                  cell.dataset.row = y;
                  cell.dataset.col = x;
                  cell.addEventListener('click', () => makeMove(y, x));
                  boardElement.appendChild(cell);
              }
          }
      }

      // Make a move
      function makeMove(row, col) {
          if (gameOver || board[row][col] !== null || currentPlayer !== userId) {
              return;
          }

          socket.emit('move', {
              game_id: gameId,
              row: row,
              col: col,
              player_id: userId,
              room: roomCode
          });
      }

      // Update the UI to reflect the current board state
      function updateBoardUI() {
          const cells = document.querySelectorAll('.board-cell');
          cells.forEach(cell => {
              const row = parseInt(cell.dataset.row);
              const col = parseInt(cell.dataset.col);
              const value = board[row][col];

              cell.className = 'board-cell';
              if (value === userId) {
                  cell.classList.add('player1');
              } else if (value) {
                  cell.classList.add('player2');
              }
          });

          // Update current player indicator
          const currentPlayerIndicator = document.querySelector('.current-player');
          if (currentPlayerIndicator) {
              currentPlayerIndicator.textContent = currentPlayer === userId ? 'Your turn' : 'Opponent\'s turn';
          }
      }

      // Show game over screen
      function showGameOver(winner) {
          const modal = document.getElementById('game-over-modal');
          const result = document.getElementById('game-result');
          const progressBar = document.getElementById('progress-bar');
          const winnerAvatar = document.getElementById('winner-avatar');

          if (winner === userId) {
              result.textContent = 'B·∫°n ƒë√£ th·∫Øng!';
              progressBar.style.width = '70%';
              winnerAvatar.querySelector('img').src = "{{ url_for('static', filename='images/avatar_0.png' if is_player1 else 'avatar_1.png') }}";
          } else {
              result.textContent = 'B·∫°n ƒë√£ thua!';
              progressBar.style.width = '30%';
              winnerAvatar.querySelector('img').src = "{{ url_for('static', filename='images/avatar_1.png' if is_player1 else 'avatar_0.png') }}";
          }

          modal.style.display = 'flex';
      }

      // Socket.IO events
      socket.on('game_state', (data) => {
          board = data.board;
          currentPlayer = data.current_player_id;
          gameOver = false;
          updateBoardUI();
      });

      socket.on('move_made', (data) => {
          board[data.row][data.col] = data.player_id;
          currentPlayer = data.current_player_id;
          updateBoardUI();
      });

      socket.on('game_over', (data) => {
          gameOver = true;
          showGameOver(data.winner_id);
      });

      socket.on('error', (data) => {
          alert(data.msg);
      });

      // Initialize the game
      initBoard();

      // Listen for player joined event
      socket.on('player_joined', (data) => {
          // Update player 2 info
          const player2Name = document.querySelector('.player2 .player-name');
          player2Name.textContent = data.display_name;

          // Update game state
          currentPlayer = data.current_player_id;
          gameOver = false;
      });

      // Listen for game started event
      socket.on('game_started', (data) => {
          currentPlayer = data.current_player_id;
          gameOver = false;
          board = data.board || Array(15).fill().map(() => Array(15).fill(null));
          updateBoardUI();
      });
    </script>
  </body>
</html>
